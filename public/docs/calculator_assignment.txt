Exercise

You will build a JavaScript calculator similar to the example shown above. You can lay it out and design it however you like, but putting your data in three separate input fields (left operand, operator, right operand) will be essential. Use one or more click event listeners on the buttons to interact with your application. You can add readonly to your input fields to ensure the user does not accidentally type into them.

Bonus!

Looks like we left the decimal point (.) button off our example. D'oh! You should fix that for us.
Use all the nifty CSS and HTML we have covered to really add some shine to your calculator. You might want to use anchor tags (<a>) instead of buttons to give yourself some more flexibility in terms of styling.
There are a few functions the Apple Calculator does that ours does not, including converting number to negative and percentages. In addition, there are dozens more you could add such as square roots, exponents, trigonometry, etc.
Convert the calculator to use Reverse Polish Notation. You may be surprised to discover this solution will take significantly less code and logic than our original solution! (For example, you would no longer need three separate input fields, just a simple textarea would work well.)
Add the ability to convert and calculate values in binary and/or hexadecimal (hint: parseInt() can actually do a lot of this for you).

**Suggestions:
* Add bonus features after completing the minumum spec
* Add unique styling with css styling
* Will need calculator HTML, CSS, & JS documents
* Push work to git hub as progressing through project
* Pseudo code before starting project to map out/outline plan
* Do not use eval()
* Avoid lots of styling before functionality is complete


OUTLINE PLAN
A. Identify required functions
	1. This calculator uses HTML buttons for its inputs, and three text input fields for handling its data. When a user presses the number keys, their value is inserted into the first input ("left operand").
	2. Once a user presses a operator button (+, -, *, or /) it gets put into the middle input.
	3. After an operator is selected, numbers are now entered into the last input ("right operand").
	4. Finally, the user presses =, and the calculation is performed with the result being inserted into the first input again. The operator is maintained so that the user can quickly repeat the operation with following operand(s).
	5. Pressing C brings everything back to the initial state.
	6. Use one or more click event listeners on the buttons to interact with your application.
	7. Add readonly to your input fields to ensure the user does not accidentally type into them.
B. Establish basic HTML layout
	1. Placeholders for divs & buttons
	2. 
C. Link external CSS & JS files to HTML file, include bootstrap for default styling
	1. calculator.html
	2. calculator.css
	3. calculator.js
	4. bootstrap.css
D. Write function statements
	1. identify the variables
	2. function to retrieve input from HTML buttons pushed (0-9), returned as numerical values into the left operand field
	3. function to retrieve input from HTML buttons pushed (+, -, *, /), returned as mathematical values in the middle operator field
	4. function to retrieve input from HTML buttons pushed (0-9), returned as numerical values in the right operand field
	5. function to calculate the all three input fields (left to right) when the "=" button is pushed
	6. function to clear the fields when the "C" button is pushed
E. Build style in CSS






